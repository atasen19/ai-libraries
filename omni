#!/usr/bin/env python3

import os
from anthropic import Anthropic, HUMAN_PROMPT, AI_PROMPT
from openai import OpenAI

# Define provider-based model mappings
PROVIDER_MODELS = {
    "Anthropic": {
        "Anthropic API": ["claude-3-5-sonnet-20241022", "claude-3-opus-20240229", "claude-3-sonnet-20240229", "claude-3-haiku-20240307"],
        "AWS Bedrock": ["anthropic.claude-3-5-sonnet-20241022-v2:0", "anthropic.claude-3-opus-20240229-v1:0", "anthropic.claude-3-sonnet-20240229-v1:0", "anthropic.claude-3-haiku@20240307-v1:0"],
        "GCP Vertex AI": ["claude-3-5-sonnet-v2@20241022", "claude-3-opus@20240229", "claude-3-sonnet@20240229", "claude-3-haiku@20240307"]
    },
    "OpenAI": {
        "OpenAI API": ["gpt-4o", "gpt-4o-mini"]  # OpenAI models
    }
}

def ask_openai_with_messages(prompt: str, model: str) -> str:
    api_key = os.getenv("OPENAI_API_KEY")
    client = OpenAI(
        api_key=api_key,
    )
    messages = [{"role": "user", "content": prompt}]
    response = client.chat.completions.create(
        model=model,
        temperature=0,
        messages=messages
    )
    return response.choices[0].message.content

def ask_claude_with_messages(prompt: str, model: str) -> str:
    api_key = os.getenv("ANTHROPIC_API_KEY")
    client = Anthropic(api_key=api_key)

    messages = [{"role": "user", "content": prompt}]
    
    response = client.messages.create(
        model=model,
        messages=messages,
        max_tokens=100
    )
    
    return response.content[0].text

def ask_model(prompt: str, model: str, provider: str, environment: str) -> str:
    if provider == "OpenAI":
        return ask_openai_with_messages(prompt, model)
    else:
        return ask_claude_with_messages(prompt, model)

def select_provider():
    print("Please select a provider:")
    providers = list(PROVIDER_MODELS.keys())
    for idx, provider in enumerate(providers, start=1):
        print(f"{idx}. {provider}")

    choice = input("Enter the number corresponding to your provider choice: ")
    try:
        provider = providers[int(choice) - 1]
    except (ValueError, IndexError):
        print("Invalid choice. Please select a valid number.")
        return select_provider()
    return provider

def select_environment(provider):
    print(f"Please select an environment for {provider}:")
    environments = list(PROVIDER_MODELS[provider].keys())
    for idx, env in enumerate(environments, start=1):
        print(f"{idx}. {env}")

    choice = input("Enter the number corresponding to your environment choice: ")
    try:
        environment = environments[int(choice) - 1]
    except (ValueError, IndexError):
        print("Invalid choice. Please select a valid number.")
        return select_environment(provider)
    return environment

def select_model(provider, environment):
    model_choices = PROVIDER_MODELS[provider][environment]
    print(f"Please select a model for {provider} - {environment}:")
    for idx, model in enumerate(model_choices, start=1):
        print(f"{idx}. {model}")
    
    choice = input("Enter the number corresponding to your model choice: ")
    try:
        model = model_choices[int(choice) - 1]
    except (ValueError, IndexError):
        print("Invalid choice. Please select a valid number.")
        return select_model(provider, environment)
    return model

def main():
    provider = select_provider()
    environment = select_environment(provider)
    model = select_model(provider, environment)
    prompt = input("Enter your prompt: ")
    response = ask_model(prompt, model, provider, environment)
    print("\nResponse:\n", response)

if __name__ == "__main__":
    main()
